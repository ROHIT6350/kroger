name: Build, Test & Deploy MongoDB Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/mongo-custom

jobs:
  build-and-push:
    runs-on: [self-hosted]   # ensure runner has Docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push MongoDB Image
        run: |
          docker build -t $IMAGE_NAME:latest .
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

      - name: Run MongoDB Smoke Test
        env:
          MONGO_ROOT_PASSWORD: ${{ secrets.SERVER_PASS }}
        run: |
          docker run -d --name mongo-test \
            -e MONGO_INITDB_ROOT_USERNAME=root \
            -e MONGO_INITDB_ROOT_PASSWORD=$MONGO_ROOT_PASSWORD \
            -p 27017:27017 $IMAGE_NAME:latest

          echo "Waiting for MongoDB and all init scripts..."
          for i in {1..15}; do
            if docker exec mongo-test mongosh --eval 'db.runCommand({ping:1})' admin -u root -p $MONGO_ROOT_PASSWORD; then
              echo "MongoDB is ready!"
              break
            fi
            sleep 5
          done

          # Optional: list databases created by init scripts
          docker exec mongo-test mongosh -u root -p $MONGO_ROOT_PASSWORD --eval "db.adminCommand('listDatabases')"

      - name: Cleanup Smoke Test
        if: always()
        run: |
          docker stop mongo-test || true
          docker rm mongo-test || true

  deploy-to-server:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to target server via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/mongo-custom:latest
            docker stop mongo-prod || true
            docker rm mongo-prod || true
            docker run -d --name mongo-prod \
              -e MONGO_INITDB_ROOT_USERNAME=root \
              -e MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }} \
              -p 27017:27017 ${{ secrets.DOCKER_USERNAME }}/mongo-custom:latest

            # Wait for MongoDB to fully initialize on server
            echo "Waiting for MongoDB to start on server..."
            for i in {1..15}; do
              if docker exec mongo-prod mongosh --eval 'db.runCommand({ping:1})' admin -u root -p ${{ secrets.MONGO_ROOT_PASSWORD }}; then
                echo "MongoDB is ready on server!"
                break
              fi
              sleep 5
            done

            # Optional: list databases
            docker exec mongo-prod mongosh -u root -p ${{ secrets.MONGO_ROOT_PASSWORD }} --eval "db.adminCommand('listDatabases')"
