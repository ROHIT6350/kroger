name: CI/CD for MongoDB Docker Image

:
  :
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/mongo-custom

jobs:

  build-and-push:
    runs-on: [self-hosted]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push MongoDB Image
        run: |
          docker build -f Dockerfile.mangoDB -t $IMAGE_NAME:latest .
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  # 2️⃣ Smoke Test: Check container starts
  smoke-test:
    runs-on: [self-hosted]
    needs: build-and-push
    steps:
      - name: Run MongoDB Container
        env:
          MONGO_ROOT_PASSWORD: ${{ secrets.SERVER_PASS }}
        run: |
          docker run -d --name mongo-test \
            -e MONGO_INITDB_ROOT_USERNAME=root \
            -e MONGO_INITDB_ROOT_PASSWORD=$MONGO_ROOT_PASSWORD \
            -p 27017:27017 $IMAGE_NAME:latest

          # Wait until MongoDB responds
          echo "Waiting for MongoDB to start..."
          for i in {1..15}; do
            if docker exec mongo-test mongosh --eval 'db.runCommand({ping:1})' admin -u root -p $MONGO_ROOT_PASSWORD; then
              echo "MongoDB is ready!"
              break
            fi
            sleep 5
          done

      - name: Cleanup Smoke Test
        if: always()
        run: |
          docker stop mongo-test || true
          docker rm mongo-test || true

  # 3️⃣ Functional Test: Check user creation from init script
  functional-test:
    runs-on: [self-hosted]
    needs: build-and-push
    steps:
      - name: Run MongoDB Container
        env:
          MONGO_ROOT_PASSWORD: ${{ secrets.SERVER_PASS }}
        run: |
          docker run -d --name mongo-func-test \
            -e MONGO_INITDB_ROOT_USERNAME=root \
            -e MONGO_INITDB_ROOT_PASSWORD=$MONGO_ROOT_PASSWORD \
            -p 27018:27017 $IMAGE_NAME:latest

          echo "Waiting for MongoDB..."
          for i in {1..15}; do
            if docker exec mongo-func-test mongosh --eval 'db.runCommand({ping:1})' admin -u root -p $MONGO_ROOT_PASSWORD; then
              echo "MongoDB is ready for functional testing!"
              break
            fi
            sleep 5
          done

          # Verify appuser exists in myapp database
          docker exec mongo-func-test mongosh -u root -p $MONGO_ROOT_PASSWORD --eval "db.getSiblingDB('myapp').getUsers()" | grep appuser

      - name: Cleanup Functional Test
        if: always()
        run: |
          docker stop mongo-func-test || true
          docker rm mongo-func-test || true

  # 4️⃣ Deploy to Target Server
  deploy:
    runs-on: [self-hosted]
    needs: [smoke-test, functional-test]
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull rohit6350/mongo-custom:latest
            docker stop mongo-prod || true
            docker rm mongo-prod || true
            docker run -d --name mongo-prod \
              -e MONGO_INITDB_ROOT_USERNAME=root \
              -e MONGO_INITDB_ROOT_PASSWORD=$SERVER_PASS \
              -p 27017:27017 rohit6350/mongo-custom:latest

